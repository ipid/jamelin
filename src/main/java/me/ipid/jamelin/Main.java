/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.ipid.jamelin;

import com.google.common.base.Charsets;
import com.google.common.io.CharSource;
import com.google.common.io.Files;
import me.ipid.jamelin.ast.Ast.AstProgram;
import me.ipid.jamelin.ast.BuildAstVisitor;
import me.ipid.jamelin.compiler.ModuleConverter;
import me.ipid.jamelin.entity.RuntimeInfo;
import me.ipid.jamelin.exception.CompileExceptions.CompileException;
import me.ipid.jamelin.exception.RuntimeExceptions.JamelinRuntimeException;
import me.ipid.jamelin.execute.JamelinKernel;
import me.ipid.jamelin.thirdparty.antlr.PromelaAntlrLexer;
import me.ipid.jamelin.thirdparty.antlr.PromelaAntlrParser;
import me.ipid.jamelin.thirdparty.antlr.PromelaAntlrParser.SpecContext;
import me.ipid.jamelin.util.AntlrErrorListener;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;

/**
 * 程序的主入口。
 */
public class Main {

    // 最大文件大小（字节）
    private static final long fileSizeLimit = 16 * 1024 * 1024;

    private static final Logger logger = LogManager.getLogger(Main.class);

    public static void main(String[] args) {
        if (args.length < 1) {
            logger.error("请输入文件路径");
            System.exit(1);
        }

        new Main().run(args[0]);
    }

    private SpecContext getParseTree(String content) {
        // 初始化 ANTLR 的一系列类
        CharStream stream = CharStreams.fromString(content);
        PromelaAntlrLexer lexer = new PromelaAntlrLexer(stream);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        PromelaAntlrParser parser = new PromelaAntlrParser(tokens);

        // 改变 ANTLR 的错误识别逻辑
        lexer.removeErrorListeners();
        parser.removeErrorListeners();

        AntlrErrorListener errorListener = new AntlrErrorListener();
        lexer.addErrorListener(errorListener);
        parser.addErrorListener(errorListener);

        // 生成解析树
        PromelaAntlrParser.SpecContext tree = parser.spec();

        // 将语法错误打印给用户
        if (errorListener.isErrorHappened()) {
            for (String errMsg : errorListener.getErrorList()) {
                logger.error(errMsg);
            }
            System.exit(1);
        }

        return tree;
    }

    private String readFile(String filePath) {
        File file = new File(filePath);

        // 如果文件大小大于 16M
        if (file.length() > fileSizeLimit) {
            logger.error("文件过大。");
            System.exit(1);
        }

        // 将文件一次性读入 String 中
        CharSource charSource = Files.asCharSource(file, Charsets.UTF_8);
        String content = null;
        try {
            content = charSource.read();
        } catch (IOException ioe) {
            logger.error("读取文件时发生错误。");
            System.exit(1);
        }

        return content;
    }

    /**
     * Main 类的主入口。
     *
     * @param filePath Promela 文件的路径
     */
    private void run(String filePath) {
        logger.debug("读入文件内容");
        String content = readFile(filePath);

        RuntimeInfo rInfo;
        try {
            logger.debug("生成解析树");
            SpecContext tree = getParseTree(content);
            content = null;

            logger.debug("生成 AST");
            AstProgram ast;
            {
                var visitor = new BuildAstVisitor();
                ast = visitor.buildProgram(tree);
            }
            tree = null;

            logger.debug("生成状态图");
            rInfo = ModuleConverter.buildRuntimeInfo(ast);

        } catch (CompileException e) {
            logger.error(String.format("解析错误：%s", e.getMessage()));
            System.exit(1);

            // Unreachable
            return;
        }

        logger.debug("开始运行");
        JamelinKernel kernel = new JamelinKernel(rInfo);
        try {
            kernel.run();
        } catch (JamelinRuntimeException e) {
            logger.error("运行错误：" + e.getMessage());
            System.exit(1);
        }
    }
}
